# @package _global_

defaults:
  - /benchmark/nav/pointnav: pointnav_hm3d_map
  - /habitat_baselines: habitat_baselines_rl_config_base
  # - /habitat/task/actions@habitat.task.actions.main_agent_discrete_stop: discrete_stop
  # - /habitat/task/actions@habitat.task.actions.main_agent_discrete_move_forward: discrete_move_forward
  # - /habitat/task/actions@habitat.task.actions.main_agent_discrete_turn_left: discrete_turn_left
  # - /habitat/task/actions@habitat.task.actions.main_agent_discrete_turn_right: discrete_turn_right
  # - /habitat/task/lab_sensors@habitat.task.lab_sensors.main_agent_obstacle_map: obstacle_map
  # - /habitat/task/lab_sensors@habitat.task.lab_sensors.main_agent_pointgoal_with_gps_compass: pointgoal_with_gps_compass_sensor
  # - /habitat/task/lab_sensors@habitat.task.lab_sensors.main_agent_localization_sensor: localization_sensor 
  # - /habitat/task/lab_sensors@habitat.task.lab_sensors.main_agent_gps: gps_sensor 
  # - /habitat/task/lab_sensors@habitat.task.lab_sensors.main_agent_compass: compass_sensor 
  - _self_

habitat:
  task:
    actions:
      stop:
        type: StopAction
      move_forward:
        type: MoveForwardAction
        tilt_angle: 25
      turn_left:
        type: TurnLeftAction
        tilt_angle: 10
      turn_right:
        type: TurnRightAction
        tilt_angle: 10

habitat_baselines:
  verbose: True
  trainer_name: "ddppo"
  torch_gpu_id: 0
  tensorboard_dir: "evaluation/falcon_htdmap_pointnav/hm3d/tb"
  video_dir: "evaluation/falcon_htdmap_pointnav/hm3d/video"
  test_episode_count: -1
  eval_ckpt_path_dir: "data/new_checkpoints"
  # num_environments: 4
  num_environments: 32
  checkpoint_folder: "evaluation/falcon_htdmap_pointnav/hm3d/new_checkpoints"
  num_updates: -1
  # total_num_steps: 2.5e9
  total_num_steps: 1e8
  log_interval: 10
  num_checkpoints: 100
  # Force PyTorch to be single threaded as
  # this improves performance considerably
  force_torch_single_threaded: True
  load_resume_state_config: True

  rl:
    policy:
      main_agent:
        name: "PointNavResNetPolicyWithHTDMapInject"

    ppo:
      # ppo params
      clip_param: 0.2
      ppo_epoch: 2
      num_mini_batch: 2
      value_loss_coef: 0.5
      entropy_coef: 0.01
      lr: 2.5e-4
      eps: 1e-5
      max_grad_norm: 0.2
      num_steps: 128
      use_gae: True
      gamma: 0.99
      tau: 0.95
      use_linear_clip_decay: False
      use_linear_lr_decay: False
      reward_window_size: 50

      use_normalized_advantage: False

      hidden_size: 512

      # Use double buffered sampling, typically helps
      # when environment time is similar or larger than
      # policy inference time during rollout generation
      use_double_buffered_sampler: False

    ddppo:
      sync_frac: 0.6
      # The PyTorch distributed backend to use
      distrib_backend: NCCL
      # Visual encoder backbone
      pretrained_weights: pretrained_model/pretrained_habitat3.pth
      # Initialize with pretrained weights
      pretrained: False
      # Initialize just the visual encoder backbone with pretrained weights
      pretrained_encoder: True
      # Whether the visual encoder backbone will be trained.
      train_encoder: True
      # Whether to reset the critic linear layer
      reset_critic: True

      # Model parameters
      backbone: resnet50
      rnn_type: LSTM
      num_recurrent_layers: 2
